# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
version: '3'

vars: 
  # if you change this you have to change also the ami id in microk8s.cf
  REGION: "us-east-1"
  # preallocated elastic ip and dns pointing to that IP
  # apihost file
  APIHOST: apihost.txt

  # hack to read a variable from .env
  GITHUB_USER: 
    sh: |
        if test -e ../.env
        then awk -F= '/GITHUB_USER=/{print $2}' ../.env
        else echo unknown
        fi
  STACK: "{{.GITHUB_USER}}-nuvolaris-dev"
  KUBECONFIG: "microk8s-{{.GITHUB_USER}}.kubeconfig"
  
tasks:

  create:
    - task: import-key 
    - > 
      aws cloudformation create-stack 
      --stack-name {{.STACK}} --region {{.REGION}}
      --template-body file://microk8s.cf
      --parameter ParameterKey=Stack,ParameterValue={{.STACK}}
    - >
      aws cloudformation wait stack-create-complete
      --stack-name {{.STACK}} --region {{.REGION}} 

  destroy: 
    - >
      aws cloudformation delete-stack 
      --stack-name {{.STACK}} --region {{.REGION}}
    - >
      aws cloudformation wait stack-delete-complete
      --stack-name {{.STACK}} --region {{.REGION}}

  get-ip: 
    - |-
      aws ec2 describe-instances \
      --filters Name=tag:Name,Values={{.STACK}} Name=instance-state-name,Values=running \
      --region={{.REGION}} --output json \
      | jq -r '.Reservations[].Instances[].PublicIpAddress' | tee apihost.txt
      
  enter:
      - task: get-ip
      - ssh -i id_rsa -o "StrictHostKeyChecking=no" ubuntu@$(cat {{.APIHOST}})

  config:
      - task: get-ip
      - mkdir -p ~/.kube
      - |-
        ssh -i id_rsa -o "StrictHostKeyChecking=no" \
        "ubuntu@$(cat {{.APIHOST}})" sudo cloud-init status --wait
        scp -i id_rsa -o "StrictHostKeyChecking=no" \
        "ubuntu@$(cat {{.APIHOST}}):/etc/kubeconfig" {{.KUBECONFIG}}
      - cp -v {{.KUBECONFIG}} ~/.kube/config
      - kubectl get nodes

  import-key: 
    cmds:
    - >
      aws ec2 import-key-pair --key-name "{{.STACK}}"
      --public-key-material fileb://./id_rsa.pub --region {{.REGION}}
    ignore_error: yes

  env: env

  info: 
    cmds:
    - echo user  {{.GITHUB_USER}}
    - echo stack {{.STACK}}
    - echo kubeconfig {{.KUBECONFIG}}
    silent: true
    
