# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

!kubectl -n nuvolaris delete all --all
!kubectl -n nuvolaris delete pvc --all

import json, logging
import nuvolaris.couchdb as cdb
import nuvolaris.couchdb_util as cdbu
import nuvolaris.testutil as tu
import nuvolaris.config as cfg
import nuvolaris.kube as kube
import nuvolaris.userdb_util as userdb
import nuvolaris.user_config as user_config
import nuvolaris.user_metadata as user_metadata

assert(cfg.configure(tu.load_sample_config()))
assert(cfg.detect_labels()["nuvolaris.kube"] == "kind")
assert(cfg.detect_storage()["nuvolaris.storageclass"] == "standard")
assert(cfg.put("couchdb.host", "localhost"))

!kubectl apply -f tests/kind/whisk.yaml
wsk = kube.get("wsk/controller")
cdb.create(wsk)

import nuvolaris.couchdb_util
db = nuvolaris.couchdb_util.CouchDB()

assert(db.wait_db_ready(60))
assert(db.configure_single_node())
assert(db.configure_no_reduce_limit())
assert(cdb.init_users_metadata(db))

!kubectl apply -f tests/kind/whisk-user.yaml
wsku = kube.get("wsku/franztt")
ucfg = user_config.UserConfig(wsku['spec'])
metadata = user_metadata.UserMetadata(ucfg)
assert(userdb.save_user_metadata(metadata))

selector = {"selector":{"login": {"$eq": ucfg.get('namespace') }}}
response = db.find_doc("users_metadata", json.dumps(selector))

assert(response)
docs = list(response['docs'])
assert(len(docs) > 0)

doc = docs[0]
assert(ucfg.get('password') == doc['password'])

assert(userdb.delete_user_metadata(ucfg.get('namespace')))
response = db.find_doc("users_metadata", json.dumps(selector))
assert(response)
docs = list(response['docs'])
assert(len(docs) == 0)

!kubectl -n nuvolaris delete all --all
!kubectl -n nuvolaris delete pvc --all

