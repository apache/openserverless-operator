# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
!kubectl -n nuvolaris delete all --all
!kubectl -n nuvolaris delete pvc --all

import nuvolaris.couchdb as cdb
import nuvolaris.config as cfg
import nuvolaris.testutil as tu
import nuvolaris.kube as kube
import nuvolaris.zookeeper as zookeeper
import nuvolaris.kafka as kafka
import nuvolaris.invoker as invoker
import nuvolaris.openwhisk as ow
import logging

# test
assert(cfg.configure(tu.load_sample_config(name="whisk-full")))
assert(cfg.detect_storage()["nuvolaris.storageclass"])
assert(cfg.put("controller.image","ghcr.io/nuvolaris/openwhisk-controller"))
assert(cfg.put("controller.tag","0.3.0-morpheus.22122609"))
assert(cfg.put("invoker.image","ghcr.io/nuvolaris/openwhisk-controller"))
assert(cfg.put("invoker.tag","0.3.0-morpheus.22122609"))
assert(cfg.put("components.invoker",True))

# setup couchdb
assert(cfg.put("couchdb.host", "localhost"))

!kubectl apply -f tests/kind/whisk-full.yaml
wsk = kube.get("wsk/controller")
cdb.create(wsk)

import nuvolaris.couchdb_util
db = nuvolaris.couchdb_util.CouchDB()

assert(db.wait_db_ready(60))

assert(cdb.init_system(db))
assert(cdb.init_subjects(db))
assert(cdb.init_activations(db))
assert(cdb.init_actions(db))
assert(cdb.add_initial_subjects(db))

# from now on this should be used
assert(cfg.put("couchdb.host", "couchdb"))

assert(zookeeper.create())

pod_name = zookeeper.get_zookeeper_pod_name()
assert(pod_name)

zookeeper_version = kube.kubectl("get", f"pods/{pod_name}", jsonpath="{.spec.containers[0].image}")
assert(zookeeper_version[0] == "ghcr.io/nuvolaris/zookeeper:3.4.14")

# check the url is stored into the configuration
assert(cfg.get("nuvolaris.zookeeper.url") == "zookeeper-0.zookeeper:2181")

assert(kafka.create())

pod_name = kafka.get_kafka_pod_name()
assert(pod_name)

# check the url is stored into the configuration
assert(cfg.get("nuvolaris.kafka.url") == "kafka:9092")

assert(invoker.create())
assert(ow.create())

assert(ow.delete())
assert(invoker.delete())
assert(kafka.delete())
assert(zookeeper.delete())

!kubectl -n nuvolaris delete all --all
!kubectl -n nuvolaris delete pvc --all